(* let toFile ~path (solution : Solution.t) = *)

(*   let dumpSource (source : Solution.Source.t) = *)
(*     let items = *)
(*       match source.src with *)
(*       | Solution.Source.Archive { url; checksum } -> *)
(*         [ *)
(*           "source", `String url; *)
(*           "checksum", `String checksum; *)
(*         ] *)
(*       | Solution.Source.GitSource { url; commit } -> [ *)
(*           "source", `String ("git:" ^ url ^ "#" ^ commit); *)
(*         ] *)
(*       | Solution.Source.GithubSource { user; name; commit } -> [ *)
(*           "source", `String ("github:" ^ user ^ "/" ^ name ^ "#" ^ commit); *)
(*         ] *)
(*       | Solution.Source.File { path } -> [ *)
(*         "source", `String ("file:" ^ path); *)
(*         ] *)
(*       | Solution.Source.NoSource -> [] *)
(*     in *)
(*     `O items *)
(*   in *)

(*   let open RunAsync.Syntax in *)
(*   let pkgs = solution.root.pkg::solution.root.bag in *)
(*   let yaml = *)
(*     let items = *)
(*       pkgs *)
(*       |> List.map (fun pkg -> *)
(*         let version = Solution.Version.toString pkg.Solution.version in *)
(*         let key = Printf.sprintf "%s@%s" pkg.Solution.name version in *)
(*         key, pkg.source) *)
(*       |> List.sort (fun (a, _) (b, _) -> String.compare a b) *)
(*       |> List.map (fun (key, source) -> *)
(*           let value = dumpSource source in *)
(*           key, value) *)
(*     in `O items *)
(*   in *)
(*   let%bind data = *)
(*     Yaml.to_string ~scalar_style:`Double_quoted ~layout_style:`Block yaml *)
(*     |> Run.ofBosError *)
(*     |> RunAsync.ofRun *)
(*   in *)
(*   Fs.writeFile ~data path *)

(* let ofFile (_path : Path.t) = *)
(*   () *)
