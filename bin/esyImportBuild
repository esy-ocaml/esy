#!/usr/bin/env bash

set -e
set -u
set -o pipefail

esyCommandHelp() {
  cat <<EOF
usage: esy import-build <path-to-build>

This command imports the build from <path-to-build> into the global store.
The build can be either a directory or a tar.gz archive.

EOF
}

BINDIR=$(dirname "$0")

# shellcheck source=./esyRuntime.sh
source "$BINDIR/esyRuntime.sh"

buildPath="$1"
buildId=$(basename "${buildPath%.tar.gz}")

stageDir=$(mktemp -d)
stageBuildPath="$stageDir/$buildId"

destStorePath=$(esyGetStorePathFromPrefix "$ESY__PREFIX")
destStorePathLen=$(esyStrLen "$destStorePath")

function _do () {
  set -e
  set -u
  set -o pipefail

  local origStorePath

  echo "$buildId: importing..."

  if [ -d "$destStorePath/i/$buildId" ]; then
    echo "$buildId: already exists in store, skipping..."
    exit 0
  fi

  if [[ "$buildPath" == *.tar.gz ]]; then
    cp "$buildPath" "$stageBuildPath.tar.gz"
    (cd "$stageDir" && tar xzf "$stageBuildPath.tar.gz")
  else
    cp -rf "$buildPath" "$stageBuildPath"
  fi

  origStorePath=$(cat "$stageBuildPath/_esy/storePrefix")
  origStorePathLen=$(esyStrLen "$origStorePath")

  if [ "$origStorePathLen" -ne "$destStorePathLen" ]; then
    echo "error: unable to import build: store path length mismatch"
    exit 1
  fi

  esyRewriteStorePrefix "$stageBuildPath" "$origStorePath" "$destStorePath"

  mkdir -p "$destStorePath/i"
  mv "$stageBuildPath" "$destStorePath/i"

  echo "$buildId: done"
}

set +e
(_do)
ret="$?"
set -e

rm -rf "$stageDir"

if [ $ret -ne 0 ]; then
  exit 1
fi
