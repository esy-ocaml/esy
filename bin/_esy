#!/usr/bin/env bash

set -e

# http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  SCRIPTDIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$SCRIPTDIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
SCRIPTDIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

# Had to remove this so that we could just use one command `esy` which we
# forward everything to.
# We'll have to reimplement v that feature in the actual js impl.
# CURDIR=`pwd`
# while [ ! -e "$CURDIR/package.json" ]; do
#     if [ "$CURDIR" == "/" ]; then
#         echo "Cannot find package.json" >&2
#         exit 1
#     fi
#     CURDIR=`cd $CURDIR/..; pwd`
# done

if [ -z "${ESY__SANDBOX+x}" ]; then
  export ESY__SANDBOX="$PWD"
fi
if [ -z "${ESY__PREFIX+x}" ]; then
  export ESY__PREFIX="$HOME/.esy"
fi
if [ -z "${ESY__LOCAL_STORE+x}" ]; then
  export ESY__LOCAL_STORE="$ESY__SANDBOX/node_modules/.cache/_esy/store"
fi

MAKEFILE_BUILD_EJECT_PATH="$ESY__SANDBOX/node_modules/.cache/_esy/build-eject"
BUILD_EJECT_PATH="$ESY__SANDBOX/node_modules/.cache/_esy/build"

if [ -d "$ESY__SANDBOX/node_modules" ]; then
  DEPENDENCIES_PACKAGE_JSON=$(find "$ESY__SANDBOX/node_modules" -name 'package.json' -or -name 'esy.json')
else
  DEPENDENCIES_PACKAGE_JSON=""
fi

needRebuildTarget () {
  TARGET="$1"
  NEED_REBUILD="false"

  # check if target exist
  if [ ! -f "$TARGET" ]; then
    NEED_REBUILD="true"
  else
    # check sandbox package.json
    if [ "$TARGET" -ot "$ESY__SANDBOX/package.json" ] || [ "$TARGET" -ot "$ESY__SANDBOX/esy.json" ]; then
      NEED_REBUILD="true"
    elif [ "$TARGET" -ot "$ESY__SANDBOX/esy.lock" ]; then
      NEED_REBUILD="true"
    else
      # check each dependencies' package.json
      for dep in $DEPENDENCIES_PACKAGE_JSON; do
        if [ "$TARGET" -ot "$dep" ]; then
          NEED_REBUILD="true"
          break
        fi
      done
    fi
  fi

  echo "$NEED_REBUILD"
}

callBuiltInCommand__build () {
  ensureBuildEjected
  if [ $# -eq 0 ]; then
    exec "$BUILD_EJECT_PATH/bin/build"
  else
    exec "$BUILD_EJECT_PATH/bin/build-exec" "$@"
  fi
}

callBuiltInCommand__x () {
  ensureBuildEjected --silent
  local installOutput
  set +e
  installOutput=$("$BUILD_EJECT_PATH/bin/install")
  local ret="$?"
  set -e
  if [ $ret -ne 0 ]; then
    echo "$installOutput"
    exit 1
  fi
  source "$BUILD_EJECT_PATH/bin/sandbox-env"
  shift
  # Checks if command ($1) is present available
  command -v "$1" >/dev/null 2>&1 || {
    echo >&2 "$1 command is not installed.";
    exit 1;
  }
  exec "$@"
}

ensureBuildEjected () {
  local esyArgs
  local needRebuild
  needRebuild=$(needRebuildTarget "$BUILD_EJECT_PATH/bin/build")
  if [ "$needRebuild" == "true" ]; then
    if [ "$1" == "--silent" ]; then
      (>&2 echo "info: rebuilding project, this will take some time...")
      esyArgs="$esyArgs --silent"
      shift
    fi
    node "$SCRIPTDIR/esy.js" "$esyArgs" build \
      --dependencies-only \
      --eject "$BUILD_EJECT_PATH" "$@"
    if [ $? -ne 0 ]; then
      exit 1
    fi
  fi
}

callBuiltInCommand__buildEject () {
  local needRebuild
  needRebuild=$(needRebuildTarget "$MAKEFILE_BUILD_EJECT_PATH/Makefile")
  if [ "$needRebuild" == "true" ]; then
    # Capture the error output
    # Capturing stderr is very important to prevent nodejs from setting
    # stderr to nonblocking mode
    EJECT_LOG=$(node "$SCRIPTDIR/esy.js" build-eject "$MAKEFILE_BUILD_EJECT_PATH" "$@" 2>&1)
    if [ $? -ne 0 ]; then
      echo "Failed to prepare build environment:"
      printf "%s\n" "$EJECT_LOG" >&2
      exit 1
    fi
  fi
}

callBuiltInCommand() {
	node "$SCRIPTDIR/esy.js" "$@"
}

printHelp() {
  cat <<EOF
  Usage: $0 <command> [--help] [--version]

  install               Installs packages declared in package.json.
  i

  build                 Builds everything that needs to be built, caches
  b                     results. Builds according to each package's "esy"
                        entry in package.json. Before building each package,
                        the environment is scrubbed clean then created according
                        to dependencies.

  build <command>       Builds everything that needs to be build, caches
  b <command>           results. Then runs a command inside the root package's
                        build environment.

  shell                 The same as esy build-shell, but creates a "relaxed"
                        environment - meaning it also inherits your existing
                        shell.

  add <package>         Add a specified package to dependencies and installs it.

  release TYPE          Create a release of type TYPE ("dev", "pack" or "bin").

  print-env             Prints esy environment on stdout.

  build-shell [path]    Drops into a shell with environment matching your
                        package's build environment. If argument is provided
                        then it should point to the package inside the current
                        sandbox â€” that will initialize build shell for that
                        specified package.

  build-eject           Creates node_modules/.cache/esy/build-eject/Makefile,
                        which is later can be used for building without the NodeJS
                        runtime.

                        Unsupported form: build-eject [cygwin | linux | darwin]
                        Ejects a build for the specific platform. This
                        build-eject form is not officially supported and will
                        be removed soon. It is currently here for debugging
                        purposes.

  install-cache         Manage installation cache (similar to 'yarn cache'
                        command).

  import-opam           Read a provided opam file and print esy-enabled
                        package.json conents on stdout. Example:

                          esy import-opam lwt 3.0.0 ./opam

  config ls|get         Query esy configuration.

  help                  Print this message.

  version               Print esy version and exit

  <command>             Executes <command> as if you had executed it inside of
                        esy shell.

EOF
}

printVersion() {
  (cd "$SCRIPTDIR/.." && node -p "require('./package.json').version")
}

callAnyCommand() {
  ensureBuildEjected --silent

  source "$BUILD_EJECT_PATH/bin/command-env"
  # Checks if command ($1) is present available
  command -v "$1" >/dev/null 2>&1 || {
  echo >&2 "$1 command is not installed.";
  exit 1;
  }
  exec "$@"
}

if [ $# -eq 0 ]
then
  callBuiltInCommand install
  callBuiltInCommand__build
elif [ $# -eq 1 ]; then
  case $1 in
    clean)
      callBuiltInCommand__buildEject
      make -j -s -f "$MAKEFILE_BUILD_EJECT_PATH/Makefile" "$1"
      ;;
    build-eject)
      callBuiltInCommand__buildEject
      ;;
    release)
      shift
      callBuiltInCommand release
      ;;
    build|b)
      shift
      callBuiltInCommand__build
      ;;
    build-ls)
      shift
      callBuiltInCommand build-ls
      ;;
    build-shell)
      shift
      callBuiltInCommand build-shell
      ;;
    import-opam)
      shift
      callBuiltInCommand import-opam
      ;;
    shell)
      ensureBuildEjected
      ENV="$BUILD_EJECT_PATH/bin/command-env" PS1="esy % " sh
      ;;
    print-env)
      ensureBuildEjected --silent
      cat "$BUILD_EJECT_PATH/bin/command-env"
      ;;
    config)
      shift
      callBuiltInCommand config
      ;;
    install|i)
      shift
      callBuiltInCommand install
      ;;
    add)
      shift
      callBuiltInCommand add "$@"
      callBuiltInCommand__build
      ;;
    install-cache)
      shift
      callBuiltInCommand install-cache
      ;;
    x)
      callBuiltInCommand__x
      ;;
    version|--version|-v)
      printVersion
      ;;
    help|--help|-h)
      printHelp
      ;;
    -*)
      echo error: unknown option "$1" >&2
      exit 1
      ;;
    *)
      callAnyCommand "$@"
      ;;
  esac
else
  case $1 in
    import-opam)
      shift
      callBuiltInCommand import-opam "$@"
      ;;
    build-eject)
      shift
      callBuiltInCommand__buildEject "$@"
      ;;
    add)
      shift
      callBuiltInCommand add "$@"
      callBuiltInCommand__build
      ;;
    build-ls)
      shift
      callBuiltInCommand build-ls "$@"
      ;;
    build-shell)
      shift
      callBuiltInCommand build-shell "$@"
      ;;
    install|i)
      shift
      callBuiltInCommand install "$@"
      ;;
    build|b)
      shift
      case "$1" in
        -*)
          callBuiltInCommand build "$@"
          ;;
        *)
          callBuiltInCommand__build "$@"
          ;;
      esac
      ;;
    install-cache)
      shift
      callBuiltInCommand install-cache "$@"
      ;;
    release)
      shift
      callBuiltInCommand release "$@"
      ;;
    config)
      shift
      callBuiltInCommand config "$@"
      ;;
    x)
      callBuiltInCommand__x "$@"
      ;;
    -*)
      echo Unknown option "$1" >&2
      exit 1
      ;;
    *)
      callAnyCommand "$@"
      ;;
  esac
fi

